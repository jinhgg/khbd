接口类似抽象类：
    接口可以多继承，类不可以
    都必须重写所有抽象方法
    实现接口必须实现接口的所有抽象方法，默认方法和静态方法可以不重写
    

接口中的变量：
必须是常量 public static final

接口中的静态方法：
只能通过接口名调用，不能通过实现类或者实例化对象去调用
不能重写

接口中的抽象方法：
和类一样，都必须被重写

接口中的默认方法：
可以不重写

接口中的私有方法：
见18章

接口中没有构造方法


public class TestDemo {
    public static void main(String[] args) {
        System.out.println(Study.time);
        Study.method();
        Student s = new Student();
        s.read();
        s.show();
    }
}

interface Work {
    public abstract void walk();
}

interface Study extends Work {
    public static final int time = 12;
    // 静态方法可以直接通过接口名调用
    public static void method() {
        System.out.println("static");
    }
    // 默认方法非静态，只能通过实例对象调用
    public default void show() {
        System.out.println("show");
    }
    public abstract void read();
    public abstract void write();
}

abstract class Person {
    private String name;
    private int age;
    public abstract void work();

    // 虽然抽象类不能创建对象，但构造方法也是有用的
    // 带参构造可以让子类super(name, age)调用
    public Person() {}
    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public int getAge() {
        return age;
    }
    public void setAge(int age) {
        this.age = age;
    }
}

class Student extends Person implements Study {
    public Student() {
    }

    public Student(String name, int age) {
        super(name, age);
    }

    @Override
    public void work() {
        System.out.println("work");
        
    }

    @Override
    public void read() {
        System.out.println("read");   
    }

    @Override
    public void write() {
        System.out.println("write");   
    }  

    @Override
    public void walk() {
        System.out.println("walk");   
    } 
}